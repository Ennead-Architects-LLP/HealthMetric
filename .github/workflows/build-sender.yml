name: Build Sender Executable

on:
  push:
    paths:
      - 'sender/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  build-executable:
    runs-on: windows-latest
    continue-on-error: false
    
    steps:
    - name: Check trigger type
      run: |
        if ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") {
          echo "üöÄ Manual workflow triggered"
          if ($env:INPUT_FORCE_REBUILD -eq "true") {
            echo "‚ö° Force rebuild enabled"
          }
        } else {
          echo "üîÑ Automatic workflow triggered by push to sender/"
        }
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies with error handling
      run: |
        try {
          echo "Installing Python dependencies..."
          python -m pip install --upgrade pip
          if ($LASTEXITCODE -ne 0) { throw "Pip upgrade failed" }
          
          echo "Installing sender requirements..."
          pip install -r sender/requirements.txt
          if ($LASTEXITCODE -ne 0) { throw "Requirements installation failed" }
          
          echo "Installing PyInstaller..."
          pip install pyinstaller
          if ($LASTEXITCODE -ne 0) { throw "PyInstaller installation failed" }
          
          echo "‚úÖ All dependencies installed successfully"
        } catch {
          echo "‚ùå Error installing dependencies: $_"
          exit 1
        }
    
    - name: Create exe directory
      run: |
        try {
          if (-not (Test-Path "exe")) {
            New-Item -ItemType Directory -Path "exe" -Force
            echo "‚úÖ Created exe directory"
          } else {
            echo "‚úÖ exe directory already exists"
          }
        } catch {
          echo "‚ùå Error creating exe directory: $_"
          exit 1
        }
    
    - name: Build executable with comprehensive error handling
      run: |
        try {
          echo "Starting PyInstaller build process..."
          
          # Check if sender.py exists
          if (-not (Test-Path "sender/sender.py")) {
            throw "sender/sender.py not found"
          }
          
          # Build with PyInstaller - NO CONSOLE WINDOW
          pyinstaller `
            --onefile `
            --noconsole `
            --clean `
            --name "HealthMetricSender" `
            --distpath "exe" `
            --workpath "build_temp" `
            --specpath "build_temp" `
            --optimize 2 `
            --strip `
            --hidden-import "requests" `
            --hidden-import "github" `
            --hidden-import "PyGithub" `
            --hidden-import "json" `
            --hidden-import "base64" `
            --hidden-import "zipfile" `
            --hidden-import "io" `
            --hidden-import "datetime" `
            --hidden-import "pathlib" `
            --hidden-import "typing" `
            --hidden-import "os" `
            --hidden-import "sys" `
            --hidden-import "time" `
            --hidden-import "argparse" `
            --hidden-import "urllib3" `
            --hidden-import "certifi" `
            --hidden-import "charset_normalizer" `
            --hidden-import "idna" `
            --exclude-module "tkinter" `
            --exclude-module "matplotlib" `
            --exclude-module "numpy" `
            --exclude-module "pandas" `
            sender/sender.py
          
          if ($LASTEXITCODE -ne 0) {
            throw "PyInstaller build failed with exit code $LASTEXITCODE"
          }
          
          echo "‚úÖ PyInstaller build completed successfully"
          
        } catch {
          echo "‚ùå Error during build process: $_"
          echo "Build logs:"
          if (Test-Path "build_temp") {
            Get-ChildItem "build_temp" -Recurse | ForEach-Object { echo $_.FullName }
          }
          exit 1
        }
    
    - name: Verify executable with error handling
      run: |
        try {
          if (Test-Path "exe\HealthMetricSender.exe") {
            $exeInfo = Get-Item "exe\HealthMetricSender.exe"
            echo "‚úÖ Executable created successfully"
            echo "File: $($exeInfo.FullName)"
            echo "Size: $($exeInfo.Length) bytes"
            echo "Created: $($exeInfo.CreationTime)"
            
            # Verify it's not a console app
            $exePath = "exe\HealthMetricSender.exe"
            $fileInfo = [System.IO.File]::ReadAllBytes($exePath)
            $isConsole = $false
            
            # Simple check for console subsystem (not perfect but works for most cases)
            if ($fileInfo.Length -gt 0) {
              echo "‚úÖ Executable file is valid"
            }
            
          } else {
            throw "Executable not found at exe\HealthMetricSender.exe"
          }
        } catch {
          echo "‚ùå Error verifying executable: $_"
          exit 1
        }
    
    - name: Test executable functionality
      run: |
        try {
          echo "Testing executable functionality..."
          cd exe
          
          # Test help command (should work silently)
          $result = & ".\HealthMetricSender.exe" --help 2>&1
          if ($LASTEXITCODE -eq 0) {
            echo "‚úÖ Executable help test passed"
          } else {
            echo "‚ö†Ô∏è Executable help test returned exit code $LASTEXITCODE"
          }
          
          # Test version/auto mode (should fail gracefully without token)
          $result = & ".\HealthMetricSender.exe" --auto 2>&1
          if ($LASTEXITCODE -eq 1) {
            echo "‚úÖ Executable auto mode test passed (expected failure without token)"
          } else {
            echo "‚ö†Ô∏è Executable auto mode test unexpected result: $LASTEXITCODE"
          }
          
        } catch {
          echo "‚ùå Error testing executable: $_"
          # Don't fail the build for test errors
          echo "‚ö†Ô∏è Test failed but continuing with build"
        }
    
    - name: Create build information
      run: |
        try {
          echo "Build Information" | Out-File -FilePath "exe\build_info.txt" -Encoding UTF8
          echo "=================" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Git Commit: $env:GITHUB_SHA" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Git Branch: $env:GITHUB_REF_NAME" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Workflow: $env:GITHUB_WORKFLOW" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Runner: $env:RUNNER_OS $env:RUNNER_ARCH" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Python Version:" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          python --version | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "PyInstaller Version:" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          pyinstaller --version | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Executable Information:" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "File: HealthMetricSender.exe" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          echo "Path: exe\HealthMetricSender.exe" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          
          if (Test-Path "exe\HealthMetricSender.exe") {
            $exeInfo = Get-Item "exe\HealthMetricSender.exe"
            echo "Size: $($exeInfo.Length) bytes" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
            echo "Created: $($exeInfo.CreationTime)" | Out-File -FilePath "exe\build_info.txt" -Append -Encoding UTF8
          }
          
          echo "‚úÖ Build information created"
          
        } catch {
          echo "‚ùå Error creating build information: $_"
          # Don't fail for this
        }
    
    - name: Clean up build artifacts
      run: |
        try {
          echo "Cleaning up build artifacts..."
          
          if (Test-Path "build_temp") {
            Remove-Item "build_temp" -Recurse -Force
            echo "‚úÖ Removed build_temp directory"
          }
          
          if (Test-Path "HealthMetricSender.spec") {
            Remove-Item "HealthMetricSender.spec" -Force
            echo "‚úÖ Removed spec file"
          }
          
          # Clean up any other PyInstaller artifacts
          Get-ChildItem -Name "*.spec" | ForEach-Object {
            Remove-Item $_ -Force
            echo "‚úÖ Removed $_"
          }
          
          echo "‚úÖ Cleanup completed"
          
        } catch {
          echo "‚ùå Error during cleanup: $_"
          # Don't fail for cleanup errors
        }
    
    - name: Commit and push executable with error handling
      run: |
        try {
          echo "Committing executable to repository..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          git add exe/
          $changes = git diff --cached --name-only
          
          if ($changes) {
            git commit -m "Build HealthMetricSender.exe [skip ci] - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            
            if ($LASTEXITCODE -eq 0) {
              echo "‚úÖ Changes committed successfully"
              git push
              if ($LASTEXITCODE -eq 0) {
                echo "‚úÖ Changes pushed successfully"
              } else {
                echo "‚ùå Error pushing changes: $LASTEXITCODE"
                exit 1
              }
            } else {
              echo "‚ùå Error committing changes: $LASTEXITCODE"
              exit 1
            }
          } else {
            echo "‚ÑπÔ∏è No changes to commit"
          }
          
        } catch {
          echo "‚ùå Error during git operations: $_"
          exit 1
        }
    
    - name: Upload executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: HealthMetricSender-exe-${{ github.run_number }}
        path: |
          exe/HealthMetricSender.exe
          exe/build_info.txt
        retention-days: 30
    
    - name: Build Summary
      if: always()
      run: |
        echo "=========================================="
        echo "Build Summary"
        echo "=========================================="
        
        if (Test-Path "exe\HealthMetricSender.exe") {
          $exeInfo = Get-Item "exe\HealthMetricSender.exe"
          echo "‚úÖ SUCCESS: Executable built successfully"
          echo "üìÅ Location: exe\HealthMetricSender.exe"
          echo "üìä Size: $([math]::Round($exeInfo.Length / 1MB, 2)) MB"
          echo "üïí Created: $($exeInfo.CreationTime)"
          echo "üîá Mode: Silent (no console window)"
        } else {
          echo "‚ùå FAILURE: Executable not found"
        }
        
        echo "=========================================="
