---
alwaysApply: true
description: "Enforces no fake, random, placeholder, or hardcoded data - docs/asset/data is the single source of truth"
globs: docs/**/*.html,docs/**/*.js
---

# No Fake Data Rule - Real Data Only

## üö´ NEVER Use Fake, Random, or Hardcoded Data

**CRITICAL RULE**: The HealthMetric project must NEVER use:
- ‚ùå Fake data
- ‚ùå Random data (`Math.random()`, `random.randint()`, etc.)
- ‚ùå Placeholder data
- ‚ùå Hardcoded sample data
- ‚ùå Mock data
- ‚ùå Simulated data
- ‚ùå Calculated/estimated values when real data exists

## ‚úÖ Single Source of Truth

**ALWAYS use real data from**: [docs/asset/data/](mdc:docs/asset/data/)

### Required Data Loading Pattern:
```javascript
// ‚úÖ CORRECT: Load from manifest and SexyDuck files
async function loadData() {
    const manifestResponse = await fetch('asset/data/manifest.json');
    const manifest = await manifestResponse.json();
    
    for (const fileInfo of manifest.files) {
        const response = await fetch(`asset/data/${fileInfo.filename}`);
        const data = await response.json();
        // Use real data from files
    }
}

// ‚ùå WRONG: Never use hardcoded arrays
const mockData = [
    { name: 'Project 1', elements: 1000 },
    { name: 'Project 2', elements: 2000 }
];
```

### Dynamic File Discovery:
```javascript
// ‚úÖ CORRECT: Discover files dynamically from manifest
const files = manifest.files; // From manifest.json
files.forEach(file => {
    // Load each file dynamically
});

// ‚ùå WRONG: Never hardcode file lists
const hardcodedFiles = [
    'file1.sexyDuck',
    'file2.sexyDuck'
];
```

### Real Data Transformation:
```javascript
// ‚úÖ CORRECT: Transform real SexyDuck data
function transformSexyDuckData(sexDuckData, fileInfo) {
    const resultData = sexDuckData.result_data || {};
    const jobMetadata = sexDuckData.job_metadata || {};
    
    return {
        hubName: jobMetadata.hub_name || fileInfo.hub,
        projectName: jobMetadata.project_name || fileInfo.project,
        totalElements: resultData.total_elements || 0,
        // ... extract real metrics
    };
}

// ‚ùå WRONG: Never create fake data objects
const fakeProject = {
    hubName: 'Fake Hub',
    projectName: 'Fake Project',
    totalElements: 9999
};
```

## üìÅ Data Source Requirements

### Primary Data Sources
- **Manifest**: Always load from [docs/asset/data/manifest.json](mdc:docs/asset/data/manifest.json)
- **SexyDuck Files**: Load from `docs/asset/data/*.sexyDuck` files
- **Generated by Script**: Data is generated by [.github/scripts/merge_data_received.py](mdc:.github/scripts/merge_data_received.py)

### Data Flow
```
Revit Data ‚Üí _data_received/ ‚Üí Merge Script ‚Üí docs/asset/data/ ‚Üí Website
```

**Every step uses real data. No fake data anywhere in the pipeline.**

## üìä Score Data Requirements

### Real Score Data Only:
- **Source**: Score data comes from [docs/ref/scoring.py](mdc:docs/ref/scoring.py) processing SexyDuck files
- **Storage**: Scores are written back to SexyDuck files under the "score" key
- **Display**: Dashboard reads and displays only the real score data from files

### Forbidden Patterns:
```javascript
// ‚ùå NEVER DO THIS
const sampleScore = {
    total_score: Math.random() * 100,
    grade: 'A',
    metrics: generateRandomMetrics()
};

// ‚ùå NEVER DO THIS
function createSampleData() {
    return {
        totalElements: Math.floor(Math.random() * 10000),
        warningCount: Math.floor(Math.random() * 50)
    };
}

// ‚ùå NEVER DO THIS
function simulateData() {
    return {
        totalProjects: 5,
        totalElements: 15000,
        totalWarnings: 25
    };
}
```

## üîß Implementation Guidelines

### 1. Data Loading
- **Always load from manifest**: [docs/asset/data/manifest.json](mdc:docs/asset/data/manifest.json)
- **Always load SexyDuck files**: `docs/asset/data/*.sexyDuck`
- **Never create fallback data**: If no data exists, show "No data available"
- **Dynamic discovery**: Use manifest for automatic file discovery

### 2. Hero Page Data Loading
```javascript
// ‚úÖ CORRECT: Load real data in [docs/index.html](mdc:docs/index.html)
async preloadDashboardData() {
    const manifestResponse = await fetch('asset/data/manifest.json');
    const manifest = await manifestResponse.json();
    
    this.dashboardData = [];
    for (const fileInfo of manifest.files) {
        const response = await fetch(`asset/data/${fileInfo.filename}`);
        const sexDuckData = await response.json();
        const transformedData = this.transformSexyDuckData(sexDuckData, fileInfo);
        this.dashboardData.push(transformedData);
    }
}
```

### 3. Dashboard Data Loading
```javascript
// ‚úÖ CORRECT: Load from SexyDuck files in dashboard
async loadSexyDuckData() {
    const manifestResponse = await fetch('asset/data/manifest.json');
    const manifest = await manifestResponse.json();
    
    this.data = [];
    for (const fileInfo of manifest.files) {
        const response = await fetch(`asset/data/${fileInfo.filename}`);
        const sexDuckData = await response.json();
        const transformedData = this.transformSexyDuckData(sexDuckData, fileInfo);
        this.data.push(transformedData);
    }
}
```

### 4. Score Display
- **Use actual score data**: From the "score" key in SexyDuck files
- **Aggregate real data**: When multiple models, average their actual scores
- **No calculations**: Don't calculate scores in the dashboard

### 5. Error Handling
```javascript
// ‚úÖ CORRECT: Handle missing data gracefully
if (!model.score) {
    console.log('No score data available for model');
    return; // Don't show anything
}

// ‚ùå WRONG: Don't create fake data as fallback
if (!model.score) {
    model.score = createFakeScore(); // NEVER DO THIS
}
```

### 6. Data Validation
```javascript
// ‚úÖ CORRECT: Validate loaded data
if (this.data.length === 0) {
    console.error('‚ùå No SexyDuck data loaded');
    throw new Error('No SexyDuck data files could be loaded');
}

// ‚úÖ CORRECT: Provide defaults for missing data
return {
    hubName: jobMetadata.hub_name || fileInfo.hub || 'Unknown',
    totalElements: resultData.total_elements || 0,
    // Always provide fallbacks, never hardcode values
};
```

## üìä Data Structure Requirements

### Expected SexyDuck Data Structure
```javascript
// Real SexyDuck file structure
{
    "result_data": {
        "total_elements": 12345,
        "warning_count": 25,
        "views_sheets": {
            "total_views": 50,
            "total_sheets": 10
        }
    },
    "job_metadata": {
        "hub_name": "Ennead Architects LLP",
        "project_name": "1643_LHH",
        "model_name": "Existing",
        "revit_version": "2024"
    },
    "score": {
        "total_score": 85.5,
        "grade": "B+",
        // ... other score metrics
    }
}
```

## üö® Anti-Patterns to Avoid

### 1. Hardcoded Arrays
```javascript
// ‚ùå NEVER DO THIS
const projects = [
    { name: 'Project A', elements: 1000 },
    { name: 'Project B', elements: 2000 }
];
```

### 2. Fake Metrics
```javascript
// ‚ùå NEVER DO THIS
const mockMetrics = {
    hubs: 1,
    projects: 3,
    models: 5,
    elements: 25000
};
```

### 3. Hardcoded File Lists
```javascript
// ‚ùå NEVER DO THIS
const fileList = ['file1.sexyDuck', 'file2.sexyDuck'];
```

## üîÑ Dynamic Updates

### 1. Automatic Data Refresh
- Data is automatically updated by GitHub Actions workflow
- Merge script processes new files daily
- Website automatically discovers new files via manifest

### 2. No Manual Data Entry
- Never manually edit data files
- Never hardcode project lists
- Never create static data arrays

## üéØ Success Criteria

The website is correctly implemented when:
- ‚úÖ All data loads from `asset/data/manifest.json`
- ‚úÖ All SexyDuck files are loaded dynamically
- ‚úÖ No hardcoded arrays or mock data exist
- ‚úÖ New data files are automatically discovered
- ‚úÖ Metrics reflect real project data
- ‚úÖ Data updates automatically when new files arrive
- ‚úÖ Scores display real data from SexyDuck files

## üö® Enforcement

**This rule is CRITICAL for data integrity.** Any violation should be immediately corrected to ensure the dashboard displays accurate, real-time project data from Revit files.

### Files That Must Follow This Rule:
- [docs/index.html](mdc:docs/index.html)
- [docs/dashboard.html](mdc:docs/dashboard.html)
- [docs/js/core/dashboard.js](mdc:docs/js/core/dashboard.js)
- [docs/js/components/ScoreWidget.js](mdc:docs/js/components/ScoreWidget.js)
- [docs/js/components/ScoreDashboard.js](mdc:docs/js/components/ScoreDashboard.js)
- [docs/ref/scoring.py](mdc:docs/ref/scoring.py)
- [.github/scripts/merge_data_received.py](mdc:.github/scripts/merge_data_received.py)

**Remember**: [docs/asset/data/](mdc:docs/asset/data/) is the single source of truth. Everything else is just presentation of that real data.