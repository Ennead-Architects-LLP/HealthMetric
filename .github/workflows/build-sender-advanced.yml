name: Build Sender Executable (Advanced)

on:
  push:
    paths:
      - 'sender/**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'release'
        type: choice
        options:
        - release
        - debug
        - portable

jobs:
  build-executable:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r sender/requirements.txt
        pip install pyinstaller
        pip install auto-py-to-exe
    
    - name: Create directories
      run: |
        if not exist "exe" mkdir exe
        if not exist "exe\debug" mkdir exe\debug
        if not exist "exe\portable" mkdir exe\portable
    
    - name: Build Release Executable
      if: github.event.inputs.build_type == 'release' || github.event.inputs.build_type == ''
      run: |
        pyinstaller ^
          --onefile ^
          --noconsole ^
          --clean ^
          --name "HealthMetricSender" ^
          --distpath "exe" ^
          --workpath "build_temp_release" ^
          --specpath "build_temp_release" ^
          --optimize 2 ^
          --strip ^
          --upx-dir "C:\upx" ^
          --add-data "sender/requirements.txt;." ^
          --hidden-import "requests" ^
          --hidden-import "github" ^
          --hidden-import "PyGithub" ^
          --hidden-import "json" ^
          --hidden-import "base64" ^
          --hidden-import "zipfile" ^
          --hidden-import "io" ^
          --hidden-import "datetime" ^
          --hidden-import "pathlib" ^
          --hidden-import "typing" ^
          --hidden-import "os" ^
          --hidden-import "sys" ^
          --hidden-import "time" ^
          --hidden-import "argparse" ^
          --hidden-import "urllib3" ^
          --hidden-import "certifi" ^
          --hidden-import "charset_normalizer" ^
          --hidden-import "idna" ^
          --exclude-module "tkinter" ^
          --exclude-module "matplotlib" ^
          --exclude-module "numpy" ^
          --exclude-module "pandas" ^
          sender/sender.py
    
    - name: Build Debug Executable
      if: github.event.inputs.build_type == 'debug'
      run: |
        pyinstaller ^
          --onefile ^
          --console ^
          --clean ^
          --name "HealthMetricSender_Debug" ^
          --distpath "exe\debug" ^
          --workpath "build_temp_debug" ^
          --specpath "build_temp_debug" ^
          --debug "all" ^
          --add-data "sender/requirements.txt;." ^
          --hidden-import "requests" ^
          --hidden-import "github" ^
          --hidden-import "PyGithub" ^
          sender/sender.py
    
    - name: Build Portable Executable
      if: github.event.inputs.build_type == 'portable'
      run: |
        pyinstaller ^
          --onedir ^
          --noconsole ^
          --clean ^
          --name "HealthMetricSender_Portable" ^
          --distpath "exe\portable" ^
          --workpath "build_temp_portable" ^
          --specpath "build_temp_portable" ^
          --add-data "sender/requirements.txt;." ^
          --hidden-import "requests" ^
          --hidden-import "github" ^
          --hidden-import "PyGithub" ^
          sender/sender.py
    
    - name: Verify executables
      run: |
        echo "Checking for executables..."
        if exist "exe\HealthMetricSender.exe" (
          echo "✅ Release executable found"
          dir exe\HealthMetricSender.exe
        )
        if exist "exe\debug\HealthMetricSender_Debug.exe" (
          echo "✅ Debug executable found"
          dir exe\debug\HealthMetricSender_Debug.exe
        )
        if exist "exe\portable\HealthMetricSender_Portable" (
          echo "✅ Portable executable found"
          dir exe\portable\HealthMetricSender_Portable
        )
    
    - name: Test executable functionality
      run: |
        cd exe
        echo "Testing release executable..."
        HealthMetricSender.exe --help
        echo "✅ Executable test passed"
    
    - name: Create build information
      run: |
        echo Build Information > exe\build_info.txt
        echo ================= >> exe\build_info.txt
        echo Build Date: %date% %time% >> exe\build_info.txt
        echo Git Commit: %GITHUB_SHA% >> exe\build_info.txt
        echo Git Branch: %GITHUB_REF_NAME% >> exe\build_info.txt
        echo Build Type: %GITHUB_EVENT_NAME% >> exe\build_info.txt
        echo Python Version: >> exe\build_info.txt
        python --version >> exe\build_info.txt
        echo PyInstaller Version: >> exe\build_info.txt
        pyinstaller --version >> exe\build_info.txt
        echo. >> exe\build_info.txt
        echo File Information: >> exe\build_info.txt
        if exist "exe\HealthMetricSender.exe" (
          echo Release: HealthMetricSender.exe >> exe\build_info.txt
          for %%A in (exe\HealthMetricSender.exe) do echo   Size: %%~zA bytes >> exe\build_info.txt
        )
        if exist "exe\debug\HealthMetricSender_Debug.exe" (
          echo Debug: HealthMetricSender_Debug.exe >> exe\build_info.txt
          for %%A in (exe\debug\HealthMetricSender_Debug.exe) do echo   Size: %%~zA bytes >> exe\build_info.txt
        )
        if exist "exe\portable\HealthMetricSender_Portable" (
          echo Portable: HealthMetricSender_Portable folder >> exe\build_info.txt
        )
    
    - name: Clean up build artifacts
      run: |
        if exist "build_temp_release" rmdir /s /q "build_temp_release"
        if exist "build_temp_debug" rmdir /s /q "build_temp_debug"
        if exist "build_temp_portable" rmdir /s /q "build_temp_portable"
        if exist "HealthMetricSender.spec" del "HealthMetricSender.spec"
        if exist "HealthMetricSender_Debug.spec" del "HealthMetricSender_Debug.spec"
        if exist "HealthMetricSender_Portable.spec" del "HealthMetricSender_Portable.spec"
    
    - name: Commit and push executables
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add exe/
        git commit -m "Build HealthMetricSender executables [skip ci]" || exit 0
        git push
    
    - name: Upload executables as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: HealthMetricSender-executables
        path: |
          exe/HealthMetricSender.exe
          exe/debug/
          exe/portable/
          exe/build_info.txt
        retention-days: 30
    
    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          exe/HealthMetricSender.exe
          exe/build_info.txt
        draft: false
        prerelease: false
        generate_release_notes: true
        tag_name: ${{ github.ref_name }}
        name: HealthMetricSender v${{ github.ref_name }}
