---
alwaysApply: true
description: Enforce real data loading from data folder, never use hardcoded mock data
globs: docs/**/*.html,docs/**/*.js
---

# Real Data Only Rule - No Hardcoded Mock Data

## 🚫 Never Use Hardcoded Mock Data

**CRITICAL RULE**: The website must ALWAYS load real data from the data folder. Never use hardcoded mock data, sample data, or fake data in any HTML or JavaScript files.

## ✅ Required Data Loading Pattern

### 1. Always Load from Manifest
```javascript
// ✅ CORRECT: Load from manifest.json
async function loadData() {
    const manifestResponse = await fetch('asset/data/manifest.json');
    const manifest = await manifestResponse.json();
    
    for (const fileInfo of manifest.files) {
        const response = await fetch(`asset/data/${fileInfo.filename}`);
        const data = await response.json();
        // Process real data...
    }
}

// ❌ WRONG: Never use hardcoded arrays
const mockData = [
    { name: 'Project 1', elements: 1000 },
    { name: 'Project 2', elements: 2000 }
];
```

### 2. Dynamic File Discovery
```javascript
// ✅ CORRECT: Discover files dynamically
const files = manifest.files; // From manifest.json
files.forEach(file => {
    // Load each file dynamically
});

// ❌ WRONG: Never hardcode file lists
const hardcodedFiles = [
    'file1.sexyDuck',
    'file2.sexyDuck'
];
```

### 3. Real Data Transformation
```javascript
// ✅ CORRECT: Transform real SexyDuck data
function transformSexyDuckData(sexDuckData, fileInfo) {
    const resultData = sexDuckData.result_data || {};
    const jobMetadata = sexDuckData.job_metadata || {};
    
    return {
        hubName: jobMetadata.hub_name || fileInfo.hub,
        projectName: jobMetadata.project_name || fileInfo.project,
        totalElements: resultData.total_elements || 0,
        // ... extract real metrics
    };
}

// ❌ WRONG: Never create fake data objects
const fakeProject = {
    hubName: 'Fake Hub',
    projectName: 'Fake Project',
    totalElements: 9999
};
```

## 📁 Data Source Requirements

### Primary Data Sources
- **Manifest**: Always load from [docs/asset/data/manifest.json](mdc:docs/asset/data/manifest.json)
- **SexyDuck Files**: Load from `docs/asset/data/*.sexyDuck` files
- **Generated by Script**: Data is generated by [.github/scripts/merge_data_received.py](mdc:.github/scripts/merge_data_received.py)

### Data Flow
```
Revit Data → _data_received/ → Merge Script → docs/asset/data/ → Website
```

## 🔍 Implementation Guidelines

### 1. Hero Page Data Loading
```javascript
// ✅ CORRECT: Load real data in [docs/index.html](mdc:docs/index.html)
async preloadDashboardData() {
    const manifestResponse = await fetch('asset/data/manifest.json');
    const manifest = await manifestResponse.json();
    
    this.dashboardData = [];
    for (const fileInfo of manifest.files) {
        const response = await fetch(`asset/data/${fileInfo.filename}`);
        const sexDuckData = await response.json();
        const transformedData = this.transformSexyDuckData(sexDuckData, fileInfo);
        this.dashboardData.push(transformedData);
    }
}
```

### 2. Dashboard Data Loading
```javascript
// ✅ CORRECT: Load from SexyDuck files in dashboard
async loadSexyDuckData() {
    const manifestResponse = await fetch('asset/data/manifest.json');
    const manifest = await manifestResponse.json();
    
    this.data = [];
    for (const fileInfo of manifest.files) {
        const response = await fetch(`asset/data/${fileInfo.filename}`);
        const sexDuckData = await response.json();
        const transformedData = this.transformSexyDuckData(sexDuckData, fileInfo);
        this.data.push(transformedData);
    }
}
```

## 🚨 Anti-Patterns to Avoid

### 1. Hardcoded Arrays
```javascript
// ❌ NEVER DO THIS
const projects = [
    { name: 'Project A', elements: 1000 },
    { name: 'Project B', elements: 2000 }
];
```

### 2. Simulated Data
```javascript
// ❌ NEVER DO THIS
function simulateData() {
    return {
        totalProjects: 5,
        totalElements: 15000,
        totalWarnings: 25
    };
}
```

### 3. Fake Metrics
```javascript
// ❌ NEVER DO THIS
const mockMetrics = {
    hubs: 1,
    projects: 3,
    models: 5,
    elements: 25000
};
```

## 🔧 Data Validation

### 1. Always Validate Real Data
```javascript
// ✅ CORRECT: Validate loaded data
if (this.data.length === 0) {
    console.error('❌ No SexyDuck data loaded');
    throw new Error('No SexyDuck data files could be loaded');
}
```

### 2. Handle Missing Data Gracefully
```javascript
// ✅ CORRECT: Provide defaults for missing data
return {
    hubName: jobMetadata.hub_name || fileInfo.hub || 'Unknown',
    totalElements: resultData.total_elements || 0,
    // Always provide fallbacks, never hardcode values
};
```

## 📊 Data Structure Requirements

### Expected SexyDuck Data Structure
```javascript
// Real SexyDuck file structure
{
    "result_data": {
        "total_elements": 12345,
        "warning_count": 25,
        "views_sheets": {
            "total_views": 50,
            "total_sheets": 10
        }
    },
    "job_metadata": {
        "hub_name": "Ennead Architects LLP",
        "project_name": "1643_LHH",
        "model_name": "Existing",
        "revit_version": "2024"
    }
}
```

## 🔄 Dynamic Updates

### 1. Automatic Data Refresh
- Data is automatically updated by GitHub Actions workflow
- Merge script processes new files daily
- Website automatically discovers new files via manifest

### 2. No Manual Data Entry
- Never manually edit data files
- Never hardcode project lists
- Never create static data arrays

## 🎯 Success Criteria

The website is correctly implemented when:
- ✅ All data loads from `asset/data/manifest.json`
- ✅ All SexyDuck files are loaded dynamically
- ✅ No hardcoded arrays or mock data exist
- ✅ New data files are automatically discovered
- ✅ Metrics reflect real project data
- ✅ Data updates automatically when new files arrive

## 🚫 Enforcement

**This rule is CRITICAL for data integrity.** Any violation should be immediately corrected to ensure the website displays accurate, real-time project data from Revit files.